<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>python基础</title>
    <link href="/posts/1.1_url.html"/>
    <url>/posts/1.1_url.html</url>
    
    <content type="html"><![CDATA[<h3 id="python第一节"><a href="#python第一节" class="headerlink" title="|python第一节|"></a>|python第一节|</h3><h4 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h4><p>代码具有层次感，使用tab键</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>print(“”) (代码1)<br>使用“+”可以使两个字符串相加 (代码2，3，4)<br>help() 可以查看帮助文档     </p><pre><code class="hljs routeros"><span class="hljs-builtin-name">print</span>(<span class="hljs-string">"Hello World"</span>) # 代码1  <span class="hljs-builtin-name">print</span>(<span class="hljs-string">"Hello World"</span> + <span class="hljs-string">" python"</span>) #代码2  <span class="hljs-builtin-name">print</span>(<span class="hljs-string">"Hello World"</span>+<span class="hljs-string">' '</span>+<span class="hljs-string">"python"</span>) #代码3  <span class="hljs-builtin-name">print</span>(<span class="hljs-string">"Hello World"</span>,<span class="hljs-string">"python"</span>) #代码4 两个字符串 会默认添加空格  <span class="hljs-builtin-name">print</span>(<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-attribute">sep</span>=<span class="hljs-string">''</span>)#代码5 通过<span class="hljs-attribute">sep</span>=<span class="hljs-string">''</span> 可以取消空格</code></pre><h4 id="下面是代码结果"><a href="#下面是代码结果" class="headerlink" title="下面是代码结果"></a>下面是代码结果</h4><img src="/images/1.1.png" srcset="/img/loading.gif" class=""><h3 id="input函数"><a href="#input函数" class="headerlink" title="input函数"></a>input函数</h3><p>input()函数读取用户输入的信息为字符串型，不能进行数据运算<br>通过int()或eval()函数 将字符串转化为整数型 </p><pre><code class="hljs bash">name = input(<span class="hljs-string">"please input name"</span>)<span class="hljs-built_in">print</span>(name) <span class="hljs-comment"># 输出输入的字符串</span><span class="hljs-built_in">type</span>(name) <span class="hljs-comment">#查看输入的类型</span>age = <span class="hljs-built_in">eval</span>(input(<span class="hljs-string">"please input age"</span>)) <span class="hljs-comment">#通过int()或eval()将字符串转化为整数型，在进行数值运算</span>age1 = <span class="hljs-built_in">eval</span>(input(<span class="hljs-string">"please input age1"</span>))<span class="hljs-built_in">print</span>(age,age1) <span class="hljs-comment"># 输出输入的字符串</span><span class="hljs-built_in">print</span>(ype(age))<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(age1)) <span class="hljs-comment">#查看输入的类型</span></code></pre><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>井号 单行注释<br>多行注释’’’ ‘’’ 目的为了读者更好的阅读程序</p><h4 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h4><p>约定：</p><ul><li>第一个字符只能是大小写字母或下划线</li><li>后续字符只能是大小写字母或数字或下划线</li><li>区分大小写</li><li>python是动态类型语言，即不需要预先声明变量的类型</li><li>python支持增量赋值<pre><code class="hljs angelscript">b = <span class="hljs-number">2</span>a = <span class="hljs-number">0</span>d = <span class="hljs-string">'tom'</span>b += <span class="hljs-number">1</span> # b = b+<span class="hljs-number">1</span>c *= <span class="hljs-number">1</span> # c = b*<span class="hljs-number">1</span>print(a,b,c,d)</code></pre><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4>标准算术运算符  +， -， <em>， /， //， %， *</em><br>比较运算符 &lt;，&lt;= ，&gt;，，&gt;=， ==， !=<br>逻辑运算符， and，not，or  <h4 id="基本数字类型"><a href="#基本数字类型" class="headerlink" title="基本数字类型"></a>基本数字类型</h4>int: 有符号整数<br>bool：布尔值<br>true 1<br>false 0<br>float： 浮点数<h4 id="数字表示方式"><a href="#数字表示方式" class="headerlink" title="数字表示方式"></a>数字表示方式</h4>0o: 八进制<br>0x： 16进制<br>0b: 二进制<br>默认以十进制表示数字<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3>字符串用单引号，双引号，，三引号（三个连续的单引号或双引号，可以用来表示特殊字符）表示<br>python不区分字符和字符串  <h5 id="字符串的切片"><a href="#字符串的切片" class="headerlink" title="字符串的切片"></a>字符串的切片</h5>使用索引运算符[]和切片运算符[:]可得到子字符串<br>第一个字符的索引是0，最后一个字符的索引是-1<br>字符串包括切片中的起始下标，但不包含结束下标 <h4 id="连接操作"><a href="#连接操作" class="headerlink" title="连接操作"></a>连接操作</h4>+号可以使多个字符串连在一起<br>*号可以使字符串进行复制<pre><code class="hljs stylus">str =<span class="hljs-string">'abcdefg'</span>name = <span class="hljs-string">'pig'</span><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(str[<span class="hljs-number">0</span>])</span></span><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(str[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>])</span></span><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(str[:<span class="hljs-number">4</span>])</span></span><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(str[<span class="hljs-number">1</span>:])</span></span><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(str[-<span class="hljs-number">1</span>])</span></span><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(str[::<span class="hljs-number">3</span>])</span></span> #每三个取一次<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(name * <span class="hljs-number">3</span>)</span></span><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(name+<span class="hljs-string">' '</span>+str)</span></span></code></pre><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><strong>定义列表</strong>  </li><li>可以将列表当成普通的”数组”，它能保存任意数量任意类型的python对象  </li><li>像字符串一样，列表也支持下标和切片操作  </li><li>列表中的项目可以改变<br>列表操作<br>使用in或not in 判断成员关系<br>in not in 在序列中都可以判断<br>使用append方法向列表追加元素，一次只能追加一个元素 <pre><code class="hljs stylus">alist =[<span class="hljs-number">1</span>,<span class="hljs-string">'aijk'</span>,<span class="hljs-number">2</span>,<span class="hljs-string">"alice"</span>]<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(alist[<span class="hljs-number">0</span>])</span></span><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(alist[<span class="hljs-number">2</span>:])</span></span><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(alist)</span></span><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">'1'</span> in alist)</span></span><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-number">2</span> in alist)</span></span><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">'1'</span> not in alist)</span></span><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-number">2</span> not in alist)</span></span>alist.append(<span class="hljs-string">"name"</span>)<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(alist)</span></span>alist.append(<span class="hljs-number">56</span>)<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(alist)</span></span></code></pre><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a><strong>元组</strong></h4><strong>定义</strong><br>可以认为元组是静态的列表<br>元组一旦定义，不能改变<pre><code class="hljs lsl">a =(<span class="hljs-number">1</span>,'peg','abc',<span class="hljs-number">45</span>)print(<span class="hljs-number">1</span> in a)a=[<span class="hljs-number">11</span>,<span class="hljs-number">22</span>]a[<span class="hljs-number">0</span>]=<span class="hljs-number">3</span>a # 列表的修改b=(<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,'<span class="hljs-number">22</span>') #这行代码表示元祖里的元素不能被修改b[<span class="hljs-number">1</span>]=<span class="hljs-number">10</span>b</code></pre><img src="/images/1.2.png" srcset="/img/loading.gif" class=""><pre><code class="hljs hsp"><span class="hljs-meta"># 字符串转列表</span>a = <span class="hljs-string">'abcdefg'</span><span class="hljs-keyword">print</span>(a)b = list(a)<span class="hljs-keyword">print</span>(b)<span class="hljs-meta">### 列表，字符串，元祖之间的转换代码</span>n =[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]   n1=<span class="hljs-keyword">str</span>(n)   n  [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]   n1  <span class="hljs-string">'[1, 2, 3, 4, 5, 6]'</span>   n2=tuple(n1)   n2  (<span class="hljs-string">'['</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">','</span>, <span class="hljs-string">' '</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">','</span>, <span class="hljs-string">' '</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">','</span>, <span class="hljs-string">' '</span>, <span class="hljs-string">'4'</span>, <span class="hljs-string">','</span>, <span class="hljs-string">' '</span>, <span class="hljs-string">'5'</span>, <span class="hljs-string">','</span>, <span class="hljs-string">' '</span>, <span class="hljs-string">'6'</span>, <span class="hljs-string">']'</span>)</code></pre><h4 id="元组的操作"><a href="#元组的操作" class="headerlink" title="元组的操作"></a>元组的操作</h4>把元组转化为列表，对列表进行修改，再将列表转化为元组，从而实现对元组的操作 <pre><code class="hljs lsl">n = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)n1=<span class="hljs-type">list</span>(n)print(n1)del n1[<span class="hljs-number">1</span>]n1[<span class="hljs-number">0</span>]= <span class="hljs-number">0</span>n2=tuple(n1)print(n2)</code></pre><h4 id="字典的定义及操作"><a href="#字典的定义及操作" class="headerlink" title="字典的定义及操作"></a>字典的定义及操作</h4>字典是由键和值组成，用大括号。字典不是序列，不能使用下。只能访问键，返回所对应的值<br>dict ={“name”:”xiaowang”,’age’:’10’,’address’:’北京市’,’phone’:111000}<br>可以使用in not in<br>字典里的键必须为不可变类型，不可变类型有数字，字符串，元组  <pre><code class="hljs routeros"><span class="hljs-comment"># 对字典的操作</span>dict =&#123;<span class="hljs-string">"name"</span>:<span class="hljs-string">"xiaowang"</span>,<span class="hljs-string">'age'</span>:<span class="hljs-string">'10'</span>,<span class="hljs-string">'address'</span>:<span class="hljs-string">'北京市'</span>,<span class="hljs-string">'phone'</span>:111000&#125;<span class="hljs-builtin-name">print</span>(dict[<span class="hljs-string">'name'</span>])<span class="hljs-builtin-name">print</span>(dict[<span class="hljs-string">'age'</span>])<span class="hljs-builtin-name">print</span>(<span class="hljs-string">'name'</span> <span class="hljs-keyword">in</span> dict)<span class="hljs-builtin-name">print</span>(<span class="hljs-string">'aa'</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> dict)<span class="hljs-builtin-name">print</span>(<span class="hljs-string">'aa'</span> <span class="hljs-keyword">in</span> dict)<span class="hljs-comment"># 对值进行修改</span>dict[<span class="hljs-string">'phone'</span>] = 100412<span class="hljs-builtin-name">print</span>(dict)dict[<span class="hljs-string">"school"</span>] =<span class="hljs-string">'xijing'</span>#添加<span class="hljs-builtin-name">print</span>(dict)del dict[<span class="hljs-string">"age"</span>]<span class="hljs-builtin-name">print</span>(dict)</code></pre><h3 id="数据类型比较"><a href="#数据类型比较" class="headerlink" title="数据类型比较"></a>数据类型比较</h3><h2 id="按存储模型分类"><a href="#按存储模型分类" class="headerlink" title="按存储模型分类"></a><strong>按存储模型分类</strong></h2>标量类型：数值，字符串<br>容器类型: 列表，元组，，字典  <h2 id="按更新模型分类"><a href="#按更新模型分类" class="headerlink" title="按更新模型分类"></a><strong>按更新模型分类</strong></h2>可变类型: 列表，字典<br>不可变类型：数字，字符串，元组  <h2 id="按访问模型分类："><a href="#按访问模型分类：" class="headerlink" title="按访问模型分类："></a><strong>按访问模型分类</strong>：</h2>直接访问：数字<br>顺序访问： 字符串，列表，元组（序列）<br>映射访问：字典<br><strong>下面东西对可变和不可变进行解释</strong>  <pre><code class="hljs angelscript">**不可变类型**   a = <span class="hljs-number">10</span>   id(a)  <span class="hljs-number">140737005845856</span>   b =a   id(b)  <span class="hljs-number">140737005845856</span>   a =<span class="hljs-number">20</span>   id(a)  <span class="hljs-number">140737005846176</span>  **可变类型**   l1=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]   id(l1)  <span class="hljs-number">2171489833992</span>   l2=l1   id(l2)  <span class="hljs-number">2171489833992</span>   l1.append(<span class="hljs-number">4</span>)   l1  [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]   l2  [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]   **对元组改变存储位置**    l3=l1[:] # 把l1的信息赋值l3标识符   l3[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]   id(l3)  <span class="hljs-number">2171490394056</span>    id(l1)  <span class="hljs-number">2171489833992</span>   id(l2)  <span class="hljs-number">2171489833992</span>    **l1和l3属于不同存储位置，两者更改数据不会对单方数据产生影响**   del l1[<span class="hljs-number">0</span>]   l1  [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]   l2  [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]   l3  [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]</code></pre><pre><code class="hljs sas">流程控制分支格式<span class="hljs-meta">if</span>&lt;a&gt;0&gt;:  p<span class="hljs-meta">rint(</span>a)elif(a+0):  p<span class="hljs-meta">rint(</span>b)  <span class="hljs-meta">else</span>  p<span class="hljs-meta">rint(</span>c)循环格式for <span class="hljs-meta">x</span> <span class="hljs-meta">in</span> a:  p<span class="hljs-meta">rint(</span><span class="hljs-meta">x</span>, l<span class="hljs-meta">en(</span><span class="hljs-meta">x</span>))  #迭代格式for <span class="hljs-meta">x</span> <span class="hljs-meta">in</span> a[:]:  <span class="hljs-meta">if</span> l<span class="hljs-meta">en(</span><span class="hljs-meta">x</span>) &gt; 6:    a.<span class="hljs-meta">insert</span>(0 ,<span class="hljs-meta">x</span>)用<span class="hljs-meta">while</span> 格式i=0<span class="hljs-meta">while</span> i&lt;5:  p<span class="hljs-meta">eint(</span>i)  i+=i</code></pre></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>标签</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你好世界</title>
    <link href="/posts/hello_url.html"/>
    <url>/posts/hello_url.html</url>
    
    <content type="html"><![CDATA[<h1 id="你好"><a href="#你好" class="headerlink" title="你好"></a>你好</h1><p>世界</p><a id="more"></a><p>这是阅读全文</p><img src="/images/404.jpg" srcset="/img/loading.gif" class="">]]></content>
    
    
    
    <tags>
      
      <tag>标签</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
